{"name":"BiCrystal","tagline":"BiCrystal is a Python program that builds commensurate and incommensurate unit cells of bilayer materials.","body":"# BiCrystal\r\n``BiCrystal`` is a Python program that builds commensurate and incommensurate crystal structures of layered materials. The current version reads CIF files and writes the new structure to a QUANTUM ESPRESSO input file. The program also provides additional information such as the bond distance between atoms, lattice vectors in Bohr and Angstrom, and a simple 3D plot of each layer.\r\n\r\nContents\r\n==========\r\n**Overview** \\\r\n**Download** \\\r\n**Packages** \\\r\n**Files** \\\r\n**Installation** \\\r\n**Usage** \\\r\n**Examples** \\\r\n**Summary Table** \\\r\n**References** \\\r\n**License** \r\n\r\n# Overview\r\nBuilding unit cells of arbitrary size is often an inevitable task when studying the physical and mechanical properties of layered materials such as graphene, hexagonal Boron Nitride, transition metal dichalcogenides. Although most visualization software such as Xcrysden, VESTA, or Avogadro provide very powerful tools for analyzing and manipulating periodic crystal structures, constructing large unit cells in bilayers with one of the layers perturbed can be very daunting. ``BiCrystal`` provides a convenient and easy way of creating new crystal structures of arbitrary size from CIF files.\r\n\r\n# Download\r\nThe latest version of ``BiCrystal`` can be found on GitHub:\r\n\r\nhttps://github.com/tilaskabengele/BiCrystal/tree/stable\r\n\r\n**Contact**: Tilas Kabengele tilas.kabengele@dal.ca\r\n\r\n# Packages\r\n`BiCrystal` is a python-based program that uses Scipy and Shapely libraries. Additionally, the Crystal package, which is not part of the standard Python packages, should be installed. i.e Install via pip or conda:\r\n\r\n     pip install crystals\r\nor\r\n\r\n    conda install -c conda-forge crystals\r\nand\r\n\r\n    pip install shapely\r\n    \r\nFor more information on crystals and shapely, visit https://pypi.org/project/crystals/ and https://pypi.org/project/Shapely/ respectively.\r\n \r\n # Files\r\n\r\n**bicrystal** - Bash script which runs the python program \\\r\n**cifs/** - Directory with sample cif files \\\r\n**examples/** - Directory with 33 examples of QUANTUM ESPRESSO input files generated by BiCrystal \\\r\n**periodic_table.csv** - Periodic table of elements \\\r\n**program.py** - Python program to be called from bicrystal script\r\n\r\n# Installation\r\nAfter downloading the files from the Github repository to the directory of your choice (_recommended: /usr/bin/_), make `bicrystal` and `program.py` into executables:\r\n\r\n    chmod u+x bicrystal program.py\r\n\r\nNext, add this directory to your $PATH variable. In Bash, adding the following lines to your `.bashrc file`:\r\n\r\n    vi ~/.bashrc\r\n\r\nAdd:\r\n\r\n    export PATH=\"$/path/to/your/directory/with/bicrysal/:$PATH\"\r\n    export PYTHONPATH=\"${PYTHONPATH}:/path/to/your/directory/with/bicrysal/\"\r\n\r\nSave, close then source your `.bashrc` file to activate the changes:\r\n    \r\n    source ~/.bashrc\r\n\r\nRestart your terminal window to start using `bicrystal`.\r\n\r\n# Usage\r\nBiCrystal is an interactive program that instructs the user every step of the way. To start BiCrystal, in the terminal type:\r\n\r\n    bicrystal\r\n    \r\nThe first thing you will be required to do is input your cif file, e.g. graphite.cif:\r\n\r\n    ***Input cif file***\r\n    graphite.cif\r\n\r\nNext, enter input parameters m and n, and rotation angle in degrees (_zero if you want both layers unperturbed_).\r\nParameter m and n correspond to the scale of the lattice vectors along the x and y directions, respectively. As an example, let's take m = 2, n = 1, and rotation angle 21.79 degrees.\r\n    \r\n    ***Rotation parameters***\r\n    Enter m 2\r\n    Enter n 1\r\n    Enter rotation_angle 0\r\n\r\nAfter that, you will be required to pick a zeroeth atom from the top and bottom layers. If we were picking the atoms by hand using a visualization software such as Xcrysden, this would be the atom we start from when creating the new cell vectors. \r\n\r\n    Initializing atoms...\r\n\r\n\r\n    Initial TOP atoms..\r\n    Atom No. 1   c   [0.  0.  0.5]\r\n    Atom No. 2   c   [0.66667 0.33334 0.505  ]\r\n\r\n    Initial BOTTOM atoms..\r\n    Atom No. 3   c   [0. 0. 0.]\r\n    Atom No. 4   c   [0.33333 0.66667 0.005  ]\r\n    \r\n For a good symmetrical structure, always pick atoms such that the zeroeth TOP and BOTTOM atoms align. In this example, that would be Atom No. 1 and Atom No. 3. After picking your zeroeth atoms, a window with a simple 3D will then open.\r\n \r\n    Select zeroeth TOP atom\r\n    Enter Atom No. 1\r\n\r\n    Select zeroeth BOTTOM atom\r\n    Enter Atom No. 3\r\n\r\n \r\n ![cc28](https://user-images.githubusercontent.com/62076249/87927879-48795500-ca5a-11ea-98c1-b2949bb672e3.PNG)\r\n \r\n Finally, you can save your output as a QUANTUM ESPRESSO file and visualize with Xcrysden for a more sophisticated look.\r\n \r\n     ********************* SUMMARY REPORT ***********************\r\n\r\n    Top atoms(rotated) =  14\r\n    Bottom atoms  =  14\r\n\r\n    Total atoms\r\n    = 28\r\n\r\n    *************************** Done! **************************\r\n\r\n    Would you like to write Espresso file?[Y/n]\r\n\r\n   # Examples\r\n   \r\n   Let's say we saved our output in the example given above as graphite28.scf.in, we can visualize this with Xcrysden.\r\n   \r\n       xcrysden --pwi graphite28.scf.in\r\n       \r\n  ![ccmoire28](https://user-images.githubusercontent.com/62076249/87929694-377e1300-ca5d-11ea-80e3-76417f34a5e4.PNG)\r\n   \r\nLooking from the top view, we can see that for this rotation, a Moire pattern was created. Really neat! This was not apparent from the simple 3D plot because BiCrystal plots cartesian coordinates of the atoms where the top and bottom layers do not necessarily align. Before writing the QUANTUM ESPRESSO file, `BiCrystal` removes symmetrically equivalent atoms and maps back those atoms that fell outside the unit cell due to rotation. \r\n\r\nThe **examples/** folder has over 30 examples of Moire patterns graphite, Molybdenum Disulfide, and blue Phosphorene generated from `bicrystal`. Below are some examples.\r\n\r\n# Graphite 364-atom unit cell\r\nThe unit cell of graphite with 364 atoms can be generated by using parameters: m = 6, n = 5, and rotation angle of 6.01 degrees. Shown below is the top view.\r\n\r\n![cc364](https://user-images.githubusercontent.com/62076249/87933970-98f5b000-ca64-11ea-906b-15a1036989a1.PNG)\r\n\r\n# Blue phosphorene 172-atom unit cell\r\nThe unit cell of blue phosphorene with 172 atoms can be generated by using parameters: m = 6, n = 1, and rotation angle of 44.82 degrees. Shown below is the top view.\r\n\r\n![bluep172](https://user-images.githubusercontent.com/62076249/87934152-e245ff80-ca64-11ea-8f36-b69b5799e3fa.PNG)\r\n\r\n# Molybdenun Disulfide 546-atom unit cell\r\nThe unit cell of MoS<sub>2</sub> with 546 atoms atoms can be generated by using parameters: m = 6, n = 5, and rotation angle of 6.01 degrees. Shown below is the top view.\r\n\r\n![mos546](https://user-images.githubusercontent.com/62076249/87934312-2fc26c80-ca65-11ea-97a2-c9cdb3068a9d.PNG)\r\n\r\n# Summary Table\r\nAll the examples in the examples folder can be summarized in the table below:\r\n\r\n![example_table](https://user-images.githubusercontent.com/62076249/87934662-dc045300-ca65-11ea-8f54-818b7183d6e1.PNG)\r\n   \r\n # References\r\n For a detailed analysis of Moire patterns and angles:\r\n \r\n **Density functional calculations on the intricacies of Moiré patterns on graphite**, J. M. Campanera, G. Savini, I. Suarez-Martinez, and M. I. Heggie, _Phys. Rev. B 75, 235449 – Published 28 June 2007_\r\n   \r\n Crystals package authors:\r\n \r\n L. P. René de Cotret, M. R. Otto, M. J. Stern. and B. J. Siwick, An open-source software ecosystem for the interactive exploration of ultrafast electron scattering data, Advanced Structural and Chemical Imaging 4:11 (2018) DOI:10.1186/s40679-018-0060-y.\r\n \r\n For further reading and related projects, visit **Johnson Group wiki**: http://schooner.chem.dal.ca/wiki/Johnson_Group_Wiki \r\n \r\n # License\r\n Copyright (c) 2020 Tilas Kabengele, Johnson Chemistry Group, Dalhousie University.\r\n\r\nBiCrystal is a free program: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\r\n\r\nBiCrystal is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.\r\n\r\nYou should have received a copy of the GNU General Public License along with this program. If not, see http://www.gnu.org/licenses/.\r\n","note":"Don't delete this file! It's used internally to help with page regeneration."}